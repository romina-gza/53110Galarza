const fs = require('fs')

class ProductManager {
    constructor ( path ) {
        this.path = path
    }    
    
    getProducts = async () => {
        try {
            let data = await fs.promises.readFile( this.path, 'utf-8' )
            return JSON.parse(data)
        } catch (err) {
            /* fs.promises.writeFile(this.path, JSON.stringify([]), 'utf-8') */
            return []
        }
    }

    // AGREGAR PRODUCTO
    addProduct = async ( title, description, thumbnail, price, stock, code ) => {        
        // leer archivo
        let contentFile = await this.getProducts() 
        console.log('reading contentFile:', contentFile)
        
        // validar no repetir code 
        let codeRepeat = contentFile.find(c => c.code === code)
        // id incrementable
        let id = 1
        let length = contentFile.length

        if (length > 0 ) id = contentFile[length - 1].id + 1

        // campos obligatorios 
        if (codeRepeat) {
            throw new Error(`El codigo : ${codeRepeat.code} ya existe. Intenta otro codigo.`)
        }    
        if (!title || !description || !thumbnail || !price || !stock || !code ) {
            throw new Error('todos los campos son obligatorios!!')
        }    
        
        let newProduct = {
            id,
            title: title,
            description: description,
            thumbnail: thumbnail,
            price: price,
            stock: stock,
            code: code
        }            
        contentFile.push(newProduct)
        // guardar en file
        return fs.promises.writeFile(this.path, JSON.stringify(contentFile,null,2), 'utf-8')
    }    

    getProductsById = (id) => {
        let arr = this.products
        let findId = arr.find(obj => obj.id === id )

        if (!findId) {
            throw new Error(`ID: '${findId}' Not found.`)
        } else {
            console.log( `âœ… ID ${findId.id} encontrado.\n Title: ${findId.title}\n Price: ${findId.price}\n Stock: ${findId.stock}` )
            return 
        }
    }
}

let marzo = new ProductManager('./newfile.json')
marzo.getProducts()
marzo.addProduct('caja', 'etc...', 'http://img...', 123, 2,3) 
marzo.addProduct('caja', 'etc...', 'http://img...', 123, 2,8) 
marzo.addProduct('caja', 'etc...', 'http://img...', 123, 2,56) 

/*
test.addProduct('caja', 'etc...', 'http://img...', 123, 2,3)
test.addProduct('caja', 'etc...', 'http://img...', 123, 2,4) 
*/
/* test.getProducts() */
/*
test.getProductsById(1) 
*/